datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}


enum Role {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String
  secondName      String
  username        String
  email           String    @unique
  password        String
  role            Role  
  country         String?
  location        String?
  resume          String?
  address         String?
  company         String?
  avatar          String?
  profiles        Profile[]
  jobListings     JobListing[]
  applications    Application[]
  teams           Team[]
  tasks           Task[]
  sentMessages    Message[] @relation("SentMessages")
  notifications   Notification[]
  memberTeams     Team[]    @relation("TeamMembers")
}

model Notification {
  id            Int          @id @default(autoincrement())
  user_id       Int
  message       String
  read          Boolean      @default(false)
  createdAt     DateTime     @default(now())
  user          User         @relation(fields: [user_id], references: [id])
  applicationId Int?
  application   Application? @relation(fields: [applicationId], references: [id])
}

model Profile {
  id         Int     @id @default(autoincrement())
  user_id    Int     @unique
  resume     String?
  skills     String
  experience String
  user       User    @relation(fields: [user_id], references: [id])
}

model JobListing {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  requirements String
  location     String
  employer_id  Int
  employer     User          @relation(fields: [employer_id], references: [id])
  applications Application[]
}

model Application {
  id            Int            @id @default(autoincrement())
  job_id        Int
  job_seeker_id Int
  status        String
  applied_on    DateTime       @default(now())
  resume        String?       
  jobListing    JobListing     @relation(fields: [job_id], references: [id])
  jobSeeker     User           @relation(fields: [job_seeker_id], references: [id])
  notifications Notification[]
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  status      String   @default("In Progress")
  team_id     Int
  team        Team     @relation(fields: [team_id], references: [id])
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Team {
  id          Int       @id @default(autoincrement())
  employer_id Int
  name        String
  description String
  employer    User      @relation(fields: [employer_id], references: [id])
  projects    Project[]
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     User[]    @relation("TeamMembers")
}

model Task {
  id           Int      @id @default(autoincrement())
  project_id   Int
  assigned_to  Int
  title        String
  description  String
  status       String   @default("Pending")
  due_date     DateTime
  project      Project  @relation(fields: [project_id], references: [id])
  assignedUser User     @relation(fields: [assigned_to], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  team_id   Int
  sender_id Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [team_id], references: [id])
  sender    User     @relation("SentMessages", fields: [sender_id], references: [id])
}
